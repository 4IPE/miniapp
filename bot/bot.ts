import { Telegraf, Markup, Context } from 'telegraf';
import { Update, Message } from 'telegraf/typings/core/types/typegram';
import dotenv from 'dotenv';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = '7477824545:AAGgE7PVm9DwLEZahSyCwzN0oN9-mZqpWeo';
const WEB_APP_URL = 'https://aba2-176-126-49-56.ngrok-free.app';

const bot = new Telegraf(BOT_TOKEN);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx: Context<Update>) => {
    try {
        await ctx.reply(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RubyTunnel! üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            Markup.keyboard([
                [Markup.button.webApp('üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', `${WEB_APP_URL}`)],
                ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
            ]).resize()
        );
    } catch (e: unknown) {
        console.error('Error in start command:', e);
    }
});

// Inline keyboard —Å WebApp
bot.command('webapp', async (ctx: Context<Update>) => {
    try {
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            Markup.inlineKeyboard([
                [Markup.button.webApp('üåê –û—Ç–∫—Ä—ã—Ç—å WebApp', `${WEB_APP_URL}`)]
            ])
        );
    } catch (e: unknown) {
        console.error('Error in webapp command:', e);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx: Context<Update.MessageUpdate>) => {
    try {
        const message = ctx.message as Message.TextMessage;
        const text = message.text;

        switch (text) {
            case '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
                await ctx.reply(
                    'RubyTunnel - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π VPN-—Å–µ—Ä–≤–∏—Å!\n\n' +
                    'üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n' +
                    'üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n' +
                    'üåç –°–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É'
                );
                break;

            case 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
                await ctx.reply(
                    '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n' +
                    '@rubytunnel_support'
                );
                break;
        }
    } catch (e: unknown) {
        console.error('Error processing text message:', e);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
bot.on('web_app_data', async (ctx: Context<Update>) => {
    try {
        if (ctx.webAppData) {
            const data = ctx.webAppData.data;
            await ctx.reply(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp: ${data}`);
        }
    } catch (e: unknown) {
        console.error('Error processing web_app_data:', e);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err: unknown, ctx: Context<Update>) => {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error';
    console.error(`Error for ${ctx.updateType}:`, errorMessage);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(() => {
        console.log('Bot started successfully');
    })
    .catch((err: unknown) => {
        const errorMessage = err instanceof Error ? err.message : 'Unknown error';
        console.error('Error starting bot:', errorMessage);
    });

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 